import subprocess

import xmltodict


def maven_commands(use_wrapper: bool) -> dict[str, str]:
    build_command = "./mvnw" if use_wrapper else "mvn"
    jacoco_plugin = "org.jacoco:jacoco-maven-plugin:0.8.8"
    # Explanation of the Maven install flags.
    # -DskipTests: don't run tests.
    # -ntp: suppress download progress logs.
    # -T 1C: 1 process per CPU core.
    # --batch-mode: no log coloring and not ever expecting user input.

    extra_args = ""
    if target_java_version:
        extra_args = f"-Dmaven.compiler.source={target_java_version} -Dmaven.compiler.target={target_java_version}"

    if run_coverage:
        commands["test"] = f"{build_command} {jacoco_plugin}:prepare-agent test -ntp --batch-mode {extra_args}"
        commands["coverage"] = f"{build_command} {jacoco_plugin}:report"
        commands["coverage_file"] = "cat target/site/jacoco/jacoco.xml"
    else:
        commands["test"] = f"{build_command} test -ntp --batch-mode"
    return commands


def gradle_commands() -> dict[str, str]:
    extra_args = ""
    if target_java_version:
        extra_args = f"-PsourceCompatibility={target_java_version} -PtargetCompatibility={target_java_version}"

    commands = {"build": f"./gradlew clean build -x test {extra_args}", "test": f"./gradlew test {extra_args}"}
    if run_coverage:
        commands["coverage"] = "./gradlew jacocoTestReport"
        commands["coverage_file"] = "cat build/reports/jacoco/test/jacocoTestReport.xml"
    return commands


def _coverage_summary_aux(node, counters):
    if "@type" in node and node["@type"] in counters:
        counters[node["@type"]]["missed"] += int(node["@missed"])
        counters[node["@type"]]["covered"] += int(node["@covered"])
    for key in node:
        if isinstance(node[key], dict):
            counters = _coverage_summary_aux(node[key], counters)
        elif isinstance(node[key], list):
            for item in node[key]:
                counters = _coverage_summary_aux(item, counters)

    return counters


def _coverage_summary(summary):
    counters = {x: {"missed": 0, "covered": 0} for x in ["LINE", "METHOD"]}
    agg = _coverage_summary_aux(summary, counters)
    for k in agg:
        agg[k]["total"] = agg[k]["missed"] + agg[k]["covered"]
        agg[k]["percent"] = agg[k]["covered"] / agg[k]["total"] if agg[k]["total"] > 0 else 0
    return agg


def get_test_cov(repo_path: str, use_wrapper: bool, target_java_version: str):
    build_command = "./mvnw" if use_wrapper else "mvn"
    jacoco_plugin = "org.jacoco:jacoco-maven-plugin:0.8.8"
    # Explanation of the Maven install flags.
    # -DskipTests: don't run tests.
    # -ntp: suppress download progress logs.
    # -T 1C: 1 process per CPU core.
    # --batch-mode: no log coloring and not ever expecting user input.

    extra_args = f"-Dmaven.compiler.source={target_java_version} -Dmaven.compiler.target={target_java_version}"

    commands = {}
    commands["test"] = f"{build_command} {jacoco_plugin}:prepare-agent clean test -ntp --batch-mode {extra_args}"
    commands["coverage"] = f"{build_command} {jacoco_plugin}:report"
    commands["coverage_file"] = "cat target/site/jacoco/jacoco.xml"

    # test_result = subprocess.run(commands["test"].split(), capture_output=True, cwd=repo_path)
    # cov_result = subprocess.run(commands["coverage"].split(), capture_output=True, cwd=repo_path)
    cov_file_result = subprocess.run(commands["coverage_file"].split(), capture_output=True, cwd=repo_path)

    report = cov_file_result.stdout.decode("utf-8")
    report_dict = xmltodict.parse(report)
    agg_report = _coverage_summary(report_dict)
    pass


if __name__ == "__main__":
    get_test_cov(repo_path="/Users/mayvic/Documents/git/springboot-jwt", use_wrapper=False, target_java_version="8")
